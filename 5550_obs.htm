<html><head><meta content="en-us" http-equiv="Content-Language"/><link href="style.css" rel="stylesheet" type="text/css"/><link href="prettify.css" rel="stylesheet" type="text/css"/><link href="favicon8.ico" rel="icon" type="image/gif"/><script src="prettify.js" type="text/javascript"></script><meta content="text/html; charset=utf-8" http-equiv="Content-Type"/><title>ASTR 5550: Observing/Statistics</title></head><body onload="prettyPrint()">
<table align="center" width="800"><tr><td>
<center>
<h1> ASTR 5550: Observing/Statistics </h1>
</center>
<div id="hw1" style="display: none">
<a href="#" onclick="javascript: hw1.style.display='none'; hw1link.style.display='inline'; return false;">
<h3 align="left" id="projection">HW 1</h3></a>
<code class="prettyprint">
#!/usr/bin/python
#if you want to generate consistent results, you can import numpy
#and set the random seed to some number
from pylab import *
import numpy

numpy.random.seed(seed=2)
ntrials=1000
n=zeros(ntrials)
probsuccess = .3 #30% chance of detecting a galaxy in a given field
for i in range(ntrials):
    for j in xrange(10000000):  #inner loop limit set to "practically infinite"
        r = rand()
        if r     

</code></div>
<div id="hw1link" style="display: inline">
<a href="#" onclick="javascript: hw1.style.display='inline'; hw1link.style.display='none'; return false;">
<h3 align="left" id="projection">HW 1</h3></a>
</div>
<div id="hw2" style="display: none">
<a href="#" onclick="javascript: hw2.style.display='none'; hw2link.style.display='inline'; return false;">
<h3 align="left" id="projection">HW 2</h3></a>
<code class="prettyprint">
#!/opt/local/bin/ipython -pylab
from pylab import *
from scipy import comb
from scipy import stats
from scipy import factorial

#problem 1: adding poisson distributions
#This was not assigned, I just wanted to do some sanity tests
j = arange(21)
k = arange(21)
LA = 3.
LB = 6.
LC = LA+LB
Pj = LA**j / factorial(j) * exp(-LA)
Pk = LB**j / factorial(j) * exp(-LB)
#sumPl=0
#for i in j:
#    sumPl += LB ** (k-i) * LA ** i / factorial(k-i) / factorial(i) * (k&gt;i)
#Pl = sumPl * exp(-LC)
Pl2 = LC**k / factorial(k) * exp(-LC)
#Pl2 = (3+6)**(j+k) / factorial(j) / factorial(k) * exp(-3-6)
figure(3); clf()
plot(j,Pj,label="j")
plot(j,Pk,label="k")
#plot(j,Pl)
plot(k,Pl2,label="l=j+k")
title("Problem 1. Sample where E[j]=3, E[k]=6")
legend()

#problem 2a:
#plot P_a(j) where survey A is of 100 pointings with an average 2 detections per 100 pointings
j = arange(11)  # j from 0 to 10
#binomial distribtion: B(j;100,.02)
Pa = comb(100,j) * .02**j * .98 ** (100-j) 
#poisson distribution: Po(j;2)  [useable because this is the limiting case of small # of successes]
Po = 2**j / factorial(j) * exp(-2) 
figure(1); clf()
plot(j,Pa,label="Binomial")
#figure(2); clf()
plot(j,Po,label="Poisson")
title("Problem 2a.")
xlabel("Number of trials")
ylabel("Probability")
legend()

#2b. Probability of 0:
print "2a. Probability of finding 0 galaxies in 100 pointings: %f (binomial), %f (poisson)" % (Pa[0],Po[0])

#2c. Probability of 4 detections in 200 pointings:
Bin200 = comb(200,4) * .02**4 * .98 ** (200-4)
Pois200 = 4**4 / factorial(4) * exp(-4)
print "2c. Probability of finding 4 galaxies in 200 pointings: %f (binomial), %f (poisson)" % (Bin200,Pois200)

#2d. Sum of probability of 0 in 100 and 4 in 100:
BinD = Pa[0]*Pa[4]
PoisD = Po[0]*Po[4]
print "2d. Probability of finding 0 galaxies in 100 pointings and 4 galaxies in another 100 pointings: %f (binomial), %f (poisson)" % (BinD,PoisD)
print "2e. Really, we are no longer using the binomial distribution - it is not M successes in N attempts, but two independent attempts each with M successes out of 100 attempts - so it's a negative binomial distribution, but the probability of success is poorly defined."

#comparison of two distributions
#j=arange(21)
#Pj200 =  4**j / factorial(j) * exp(-4)
#Pj100twice = ( 2**j / factorial(j) * exp(-2) ) * 2 
#Pj100_0and4 = ( 4**j / factorial(j) * exp(-4) ) + 0
#figure(4); clf()
#plot(j,Pj200)
#plot(j,Pj100twice)

#3.  This is additional work for problem 3; it is not assigned
from scipy.special import erf,erfinv
x = arange(101)/10.
figure(5);clf()
#plot(x,erf(x/sqrt(2))) #the Gaussian is the error function with a factor of 1/2 in the exponent
#plot(x,ones(101)*.9) #to show the intercept
ninety = erfinv(.9)*sqrt(2) #90% confidence radius
print "3. 90%% confidence interval for a Gaussian with sigma = 1: %f    1 sigma (68%%) interval: %f km" % (ninety,90/ninety)
#problem 3. 2d gaussian simulation
#Note: the numbers come out a little bit wrong, probably because of the discrete grid
#however, making the grid finer does not seem to alleviate the issue
xgrid,ygrid = indices([2001,2001])
radgrid = ((xgrid-1000.)**2+(ygrid-1000.)**2)/10000.
s=90/ninety
#s=10
gaus = 1/(2*pi*s**2) * exp(-radgrid/(2*s**2))
figure(2); clf()
contour(gaus,gaus.max()*asarray([.54716,.90,.95,.995]))
print "The fractional area contained within 1 sigma (%f km): %f" % (s,(gaus*(radgrid<s a="" and="" another="" are="" area="" attempts="" binomial="" but="" code="" confidence="" contained="" defined="" distribution="" each="" finding="" for="" fractional="" galaxies="" gaussian="" in="" independent="" interval="" interval:="" is="" it="" km="" longer="" m="" n="" negative="" no="" not="" of="" out="" output:="" pointings="" pointings:="" poorly="" print="" probability="" really="" sigma="1:" so="" success="" successes="" the="" two="" using="" we="" with="" within="">
</s></code></div>
<div id="hw2link" style="display: inline">
<a href="#" onclick="javascript: hw2.style.display='inline'; hw2link.style.display='none'; return false;">
<h3 align="left" id="projection">HW 2</h3></a>
</div>
<div id="hw3" style="display: none">
<a href="#" onclick="javascript: hw3.style.display='none'; hw3link.style.display='inline'; return false;">
<h3 align="left" id="projection">HW 3</h3></a>
<code class="prettyprint">



#!/opt/local/bin/ipython -pylab
#Prob/Stat Homework 2
#Adam Ginsburg

from pylab import *
from scipy import factorial
import scipy
import numpy.random
from numpy.random import seed

#to generate random variables from a poisson distribution:
#a = sum[1/k! l^k e^-l] = 1 
#obviously that's incorrect because I'm supposed to use the inverse CDF, not the inverse PDF
#the CDF can be calculated by counting the number of random additions it takes to get over the
#mean, except the random additions have to be scaled somehow

#poisson_montecarlo(mean,number of trials)
#returns an array of size [ntrials] containing the number of random variables
#selected from an inverse exponential (logarithmic) distribution that had to be
#summed to reach [pois_mean]
#this is equivalent to multiplying together random variables until they are less
#than e^-lambda
def poisson_montecarlo(pois_mean,ntrials):
    n = zeros(ntrials)
    for i in range(ntrials):
        sum = 0
        for j in xrange(1000):  #inner loop limit set to large
            r = rand()
            sum += -log(r)  #pulling random variables from an exponential distribution (?)
            if sum &gt; pois_mean:  #quit when mean reached (for CDF)
                n[i]=j
                break   #quit the loop when the mean has been exceeded
    return n


#method number 2:
#sum the poisson distribution until it equals the random variable
#since the poisson distribution is normalized, summing up to a point
#is equivalent to integrating, i.e. finding the CDF
def poisson_montecarlo2(pois_mean,ntrials):
    n = zeros(ntrials)
    for i in range(ntrials):
        sum = 0
        r = rand()
        count = 0
        while sum     

</code></div>
<div id="hw3link" style="display: inline">
<a href="#" onclick="javascript: hw3.style.display='inline'; hw3link.style.display='none'; return false;">
<h3 align="left" id="projection">HW 3</h3></a>
</div>
<hr/><br/>
<script src="navbar.js" type="text/javascript"></script><script type="text/javascript">document.write(navbar())</script>
</td></tr></table></body><head><script src="./googleanalytics.js" type="text/javascript"></script></head></html>